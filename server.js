// server.js

const express = require('express');
const path = require('path');
const axios = require('axios');
const app = express();
const port = 8080;
const publicPath = path.join(__dirname, 'public');

app.use(express.static(publicPath));
app.use(express.json());

const openrouterApiKey = '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'; // üîë –í–∞—à –∫–ª—é—á
const openrouterApiUrl = 'https://openrouter.ai/api/v1/chat/completions';

app.post('/generate-crossword', async (req, res) => {
    const text = req.body.text;
    const verticalWords = parseInt(req.body.verticalWords);
    const horizontalWords = parseInt(req.body.horizontalWords);
    const totalWords = verticalWords + horizontalWords;

    try {
        const prompt = `–ò–∑ —Ç–µ–∫—Å—Ç–∞: "${text}" –≤—ã–¥–µ–ª–∏—Ç–µ ${totalWords} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
    {"word": "—Å–ª–æ–≤–æ1", "clue": "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ1"},
    {"word": "—Å–ª–æ–≤–æ2", "clue": "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ2"},
    ...
]
–ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.`;

        const response = await axios.post(openrouterApiUrl, {
            model: "google/gemma-2-9b-it:free",
            messages: [
                { role: "user", content: prompt }
            ],
            top_p: 1,
            temperature: 0.7,
            frequency_penalty: 0,
            presence_penalty: 0,
            repetition_penalty: 1,
            top_k: 0
        }, {
            headers: {
                'Authorization': `Bearer ${openrouterApiKey}`,
                'Content-Type': 'application/json',
                // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            }
        });

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('–û—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', response.data);

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageContent = response.data.choices && response.data.choices[0] && response.data.choices[0].message && response.data.choices[0].message.content;
        console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', messageContent);

        // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        let wordsData;
        try {
            wordsData = JSON.parse(messageContent);
            console.log('–ü–∞—Ä—Å–∏–Ω–≥ JSON —É—Å–ø–µ—à–µ–Ω:', wordsData);
        } catch (parseError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:', parseError);
            console.error('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageContent);
            return res.status(500).send('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏');
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞ (–ø—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        const crosswordGrid = generateCrossword(wordsData);

        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–µ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
        res.json({ 
            crossword: crosswordGrid, 
            words: wordsData,
            rawResponse: response.data, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            parsedWords: wordsData // –¢–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error.response ? error.response.data : error.message);
        res.status(500).send('–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞');
    }
});

// –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–∞
function generateCrossword(wordsData) {
    // –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é —Å–µ—Ç–∫—É 15x15
    const gridSize = 15;
    const grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));

    // –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    wordsData.forEach((item, index) => {
        const row = index % gridSize;
        const col = 0;
        for (let i = 0; i < item.word.length; i++) {
            if (col + i < gridSize) {
                grid[row][col + i] = item.word[i].toUpperCase();
            }
        }
    });

    return grid;
}

app.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});